---==================================================================================================================---
---                                                                                                                  ---
---    Original Author(s) : NLTP_ASHES                                                                               ---
---    Edited : N/A                                                                                                  ---
---    Date : 03/06/2024                                                                                             ---
---    License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)           ---
---                                                                                                                  ---
---    Script used to define various common functions defined in the scripts of the Ammo Crate addon.                ---
---                                                                                                                  ---
---==================================================================================================================---

-- ---------------------------------------------------------------------------------------------------------------------
-- Debug functions
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to print information into the console/log file only when debug mode is enabled.
--- @param ... any
--- @return nil
function dbg_printf(...)
    if ammo_crate_mcm.get_config("debug_mode") then
        printf(...)
    end
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Table functions
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to know if a certain value is contained in a table.
--- @param tab table
--- @param val any
--- @return boolean
function table_contains(tab, val)
    for _,value in pairs(tab) do
        if val == value then
            return true
        end
    end
    return false
end

--- Function used to get a random id (as an int) from a given table.
--- Returns a random number between 1 and the size of the table.
--- @param tab table
--- @return number
function table_random_id(tab)
    return math.random(1, size_table(tab))
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Data functions
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to clear the code a bit.
--- @param num number
--- @return string
function round_number(num)
    return tostring(math.floor(num + 0.5))
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Translation functions
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to know if there exists a translation for a given game string.
--- @param str string
--- @return boolean
function has_translation(str)
    return game.translate_string(str) ~= str
end

--- Function used to get the translation of a given string by its ID.
--- The function can interpolate %s in the string with the given arguments.
--- @param str string
--- @param ... any
--- @return string
function get_translation(str, ...)
	if not has_translation(str) then
		return str .. " [Missing translation]"
	end

	local string = game.translate_string(str)

	if select('#', ...) >= 1 then
		local i = 0
		local p = {...}
		local function sr()
			i = i + 1
			if type(p[i]) == "userdata" then
				return "userdata"
			end
			return tostring(p[i])
		end
		string = string.gsub(string, "%%s", sr)
	end

	return string
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Vector functions
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to get the distance between two points in 2D space.
--- @param vec_a vector
--- @param vec_b vector
--- @return number
function get_distance(vec_a, vec_b)
    local x = math.abs(vec_a.x - vec_b.x)
    local z = math.abs(vec_a.z - vec_b.z)
    return math.sqrt((x * x) + (z * z))
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Game Object functions
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to get a online object (if it exists).
--- @param id number
--- @return game_object
function find_object_by_id(id)
    return db.storage[id] and db.storage[id].object or level.object_by_id(id)
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Alife Object functions
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to iterate through every existing server object.
--- The function passed in arguments will be called once per game object, with a guarantee that the server object exists and isn't nil.
--- Extra arguments passed to 'server_objects_iter' function are passed on to 'func' function.
--- If 'func' function returns true, then the iteration stops.
--- @param func function
--- @param ... any
--- @return nil
function server_objects_iter(func, ...)
	local args = {...}
	if alife().iterate_object ~= nil then
		alife():iterate_object(function(se_obj)
			return func(se_obj, unpack(args))
		end)
	else
		for id=0, 65534 do
			local se_obj = alife_object(id)
			if se_obj and func(se_obj, unpack(args)) then
				return
			end
		end
	end
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Miscellaneous functions
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to get the real community of the NPC by checking spawn id
--- @author HarukaSai
--- @param npc game_object
--- @param default string
--- @return string
function get_real_community(npc, default)
    local furniture = {
        ["esc_m_trader"] = true,
        ["red_m_lesnik"] = true
    }

    local blacklisted_comms = {
        ["trader"] = true,
        ["monster"] = true
    }

    if furniture[npc:name()] then
        return "stalker"
    end
    local community = character_community(npc)
    if not blacklisted_comms[community] then
        return community
    end
    local squad_community = get_object_squad(npc):get_squad_community()
    if not blacklisted_comms[squad_community] then
        return squad_community
    else
        return default
    end
end