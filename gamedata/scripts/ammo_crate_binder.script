---==================================================================================================================---
---                                                                                                                  ---
---    Original Author(s) : NLTP_ASHES                                                                               ---
---    Edited : N/A                                                                                                  ---
---    Date : 03/06/2024                                                                                             ---
---    License : Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)           ---
---                                                                                                                  ---
---    Script handling the core logic of the ammo crate item.                                                        ---
---                                                                                                                  ---
---==================================================================================================================---

-- ---------------------------------------------------------------------------------------------------------------------
-- Constants and imported functions
-- ---------------------------------------------------------------------------------------------------------------------

-- Imported functions
local dbg_printf = ammo_crate_utils.dbg_printf

-- Constants
allowed_classes = {
    [clsid.wpn_ammo]                = true,
    [clsid.wpn_ammo_s]              = true,
    [clsid.wpn_ammo_m209]           = true,
    [clsid.wpn_ammo_m209_s]         = true,
    [clsid.wpn_ammo_vog25]          = true,
    [clsid.wpn_ammo_vog25_s]        = true,
    [clsid.wpn_ammo_og7b]           = true,
    [clsid.wpn_ammo_og7b_s]         = true,
    [clsid.wpn_grenade_f1]          = true,
    [clsid.wpn_grenade_f1_s]        = true,
    [clsid.wpn_grenade_rgd5]        = true,
    [clsid.wpn_grenade_rgd5_s]      = true,
    [clsid.wpn_grenade_fake]        = true,
    [clsid.wpn_grenade_rpg7]        = true,
}

-- Storage
ammo_crates = {}

-- Variables
local last_opened_crate_id = nil
local last_opened_fake_stash_id = nil

-- ---------------------------------------------------------------------------------------------------------------------
-- Ammo crate functions
-- ---------------------------------------------------------------------------------------------------------------------

--- Function used to run specific actions (notably calculate the weight of the crate) when an ammo crate is spawned.
function bind(obj)
    if not obj then return end

    -- If the crate has never been opened, allocate a table for it among the AMMO_CRATES table
    if not ammo_crates[obj:id()] then
        ammo_crates[obj:id()] = {}
    end

    obj:set_weight(this.calculate_crate_full_weight(obj:id()))
end

--- Function used to return the text written when right clicking on the crate.
function menu_open(obj)
    if not obj and obj:parent() and obj:parent():id() == AC_ID then return end

    return ammo_crate_utils.get_translation("st_ac_open")
end

--- Function used to open the ammo crate.
function func_open_crate(obj)
    if not obj then return end

    -- Spawn a fake stash that will be used as the ammo crate
    local sec = "hidden_box"
    local pos = db.actor:position()
    local lvid = level.vertex_id(pos)
    local gvid = db.actor:game_vertex_id()
    local fake_stash_se = alife_create(sec,pos,lvid,gvid)

    -- Uh oh
    if not fake_stash_se then
        printf("!ERROR func_open_crate | Failed to create fake stash for ammo crate ! [%s][%s][%s][%s]",sec,pos,lvid,gvid)
        return
    end

    dbg_printf("[AC] Fake stash created with id %s for crate id %s",fake_stash_se.id,obj:id())

    -- Open the fake stash on next update so the game object has time to spawn
    CreateTimeEvent("ammo_crate_open",fake_stash_se.id,0,open_fake_stash,fake_stash_se.id,obj:id())
end

--- Function called when the player has opened the ammo crate.
function open_fake_stash(fake_stash_id,crate_id)
    -- Get the fake stash object
    local fake_stash_se = fake_stash_id and alife_object(fake_stash_id)
    local fake_stash_obj = fake_stash_se and ammo_crate_utils.find_object_by_id(fake_stash_se.id)

    -- Fire the time event again if the fake stash hasn't spawned yet
    if not fake_stash_obj then
        return false
    end

    -- Populate the fake stash
    for _,ammo in pairs(ammo_crates[crate_id]) do
        -- Mags Redux 2023.01.29 compatibility
        if magazine_binder and magazine_binder.is_magazine(ammo.sec) then
            local se_mag = alife_create_item(ammo.sec, fake_stash_se)
            magazine_binder.set_data(se_mag.id, ammo.data)
        else
            alife_create_item(ammo.sec, fake_stash_se, {ammo = ammo.count})
        end
    end

    -- Close the inventory UI
    hide_hud_inventory()

    -- Open the fake stash on next update so populated models have time to spawn
    CreateTimeEvent("fake_stash_open",fake_stash_se.id,0,function()

        -- Save the crate & fake stash ids
        last_opened_crate_id = crate_id
        last_opened_fake_stash_id = fake_stash_se.id

        -- Force the player into opening the fake stash
        fake_stash_obj:use(db.actor)

        -- Mags Redux 2023.01.29 compatibility
        if magazines then
            CreateTimeEvent("fake_stash_refresh", last_opened_fake_stash_id, 0.5, function()
                magazines.timed_refresh()
                return true
            end)
        end

        dbg_printf("[AC] Opening fake stash id %s for crate id %s",last_opened_fake_stash_id,last_opened_crate_id)

        return true
    end)

    RegisterScriptCallback("GUI_on_hide", close_ammo_crate)

    return true
end

--- Function called when the player closes the ammo crate.
function close_ammo_crate(name)
    -- Return if GUI_on_hide has been fired for something else than UIInventory
    if name ~= "UIInventory" then return end

    -- Unregister the callback so it doesn't try to close the crate again
    UnregisterScriptCallback("GUI_on_hide", close_ammo_crate)

    -- Get the fake stash object
    local fake_stash_se = last_opened_fake_stash_id and alife_object(last_opened_fake_stash_id)
    local fake_stash_obj = fake_stash_se and ammo_crate_utils.find_object_by_id(fake_stash_se.id)

    -- Get the ammo crate object
    local ammo_crate_se = last_opened_crate_id and alife_object(last_opened_crate_id)
    local ammo_crate_obj = ammo_crate_se and ammo_crate_utils.find_object_by_id(ammo_crate_se.id)

    -- Reset the cache for the crate's content
    ammo_crates[last_opened_crate_id] = {}

    -- Cycle the fake stash's content and cache the item from the fake stash
    fake_stash_obj:iterate_inventory_box(function(_, item)
        -- Move item
        this.move_item(last_opened_crate_id, item)
    end)

    ammo_crate_obj:set_weight(this.calculate_crate_full_weight(ammo_crate_obj:id()))

    dbg_printf("[AC] Ammo crate cached content :\n%s", utils_data.print_table(ammo_crates[last_opened_crate_id], false, true))

    -- Destroy the fake stash
    CreateTimeEvent("ammo_crate_close",fake_stash_se.id,0,function()
        dbg_printf("[AC] Releasing fake stash id %s",fake_stash_se.id)
        alife_release(fake_stash_se)
        return true
    end)
end

--- Function called when the player has moved an item between the crate and his inventory to restrict the item of models allowed to move.
function check_move(flags, npc_id, obj, mode, bag)
    -- Return if ActorMenu_on_item_before_move has been called outside of our context
    if (mode ~= "loot") or (npc_id ~= last_opened_fake_stash_id) then return end

    -- If the player is trying to move something else than ammo/grenade, refuse the transfer
    if not allowed_classes[obj:clsid()] then
        flags.ret_value = false
    end
end

--- Function used to move a game_object into the memory of an ammo crate.
function move_item(crate_id, item)
    -- Mags Redux 2023.01.29 compatibility
    if magazine_binder and magazine_binder.is_magazine(item:section()) then
        local sec = item:section()
        local weight = item:weight()
        local data = magazine_binder.get_data(item:id()) or magazine_binder.create_mag_data(item:id(),item:section(),nil)
        table.insert(ammo_crates[crate_id],{ sec=sec, weight=weight, data=data })
    else
        local sec = item:section()
        local weight = item:weight()
        local count = item.ammo_get_count and item:ammo_get_count() or 1
        table.insert(ammo_crates[crate_id],{ sec=sec, weight=weight, count=count })
    end

    -- Destroy the item
    alife_release_id(item:id())
end

--- Function called when the player drags an item on top of another.
function move_item_drag_drop(dragged_item, dropped_on_item, slot_from, slot_to)
    -- Short circuit if dropped on something else than an ammo crate
    if not ammo_crates[dropped_on_item:id()] then return end

    -- Short circuit if item isn't allowed to move
    if not allowed_classes[dragged_item:clsid()] then
        printf("~[AC] Item %s cannot be moved in an ammo crate", dragged_item:name())
        return
    end

    -- Short circuit if the player is looting an ammo crate
    local ui_instance = ui_inventory.GUI
    local partner = ui_instance and ui_instance:GetPartner()
    if ui_instance and partner and partner:id() == last_opened_fake_stash_id then
        ui_instance:Action_Move(dragged_item, "actor_bag")
        return
    end

    -- Move item
    this.move_item(dropped_on_item:id(), dragged_item)
end

--- Function called when the player has moved an item between the crate and his inventory to update the weight of the crate.
function update_crate_weight(npc_id, obj, mode, bag)
    -- Return if ActorMenu_on_item_before_move has been called outside of our context
    if (mode ~= "loot") or (npc_id ~= last_opened_fake_stash_id) then return end

    -- Get the ammo crate object
    local ammo_crate_se = last_opened_crate_id and alife_object(last_opened_crate_id)
    local ammo_crate_obj = ammo_crate_se and ammo_crate_utils.find_object_by_id(ammo_crate_se.id)

    -- Moving an item from the inventory to the crate
    if bag == 2 then
        ammo_crate_obj:set_weight(ammo_crate_obj:weight() + obj:weight())
        dbg_printf("[AC] Item moved %s to crate %s (is_mag:%s)",obj:section(),ammo_crate_obj:id(),magazine_binder and magazine_binder.is_magazine(obj:section()) or false)

        -- Moving an item from the crate to the inventory
    elseif bag == 7 then
        ammo_crate_obj:set_weight(ammo_crate_obj:weight() - obj:weight())
        dbg_printf("[AC] Item moved %s from crate %s (is_mag:%s)",obj:section(),ammo_crate_obj:id(),magazine_binder and magazine_binder.is_magazine(obj:section()) or false)

        -- Following code is a fail safe, technically this would never run
    else
        printf("!ERROR update_crate_weight | Unknown bag ! [%s]",bag)

        local fake_stash_se = last_opened_fake_stash_id and alife_object(last_opened_fake_stash_id)
        local fake_stash_obj = fake_stash_se and ammo_crate_utils.find_object_by_id(fake_stash_se.id)

        local ammo_crate_weight = SYS_GetParam(2, "ammo_crate", "inv_weight")

        fake_stash_obj:iterate_inventory_box(function(_, item)
            ammo_crate_weight = ammo_crate_weight + item:weight()
        end)

        ammo_crate_obj:set_weight(ammo_crate_weight)
    end
end

--- Function used to calculate the weight of the crate according to its content
function calculate_crate_full_weight(ammo_crate_id)
    local ammo_crate_weight = SYS_GetParam(2, "ammo_crate", "inv_weight")

    -- Mags Redux 2023.01.29 compatibility
    for _,ammo_or_mag in pairs(ammo_crates[ammo_crate_id]) do
        ammo_crate_weight = ammo_crate_weight + ammo_or_mag.weight
    end

    return ammo_crate_weight
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Data persistence
-- ---------------------------------------------------------------------------------------------------------------------

function save_state(m_data)
    m_data.ammo_crates = ammo_crates
    dbg_printf("[AC] Ammo crates saved :\n%s", utils_data.print_table(m_data.ammo_crates, false, true))
end

function load_state(m_data)
    ammo_crates = m_data.ammo_crates or {}
    dbg_printf("[AC] Loaded ammo crates :\n%s", utils_data.print_table(ammo_crates, false, true))
end

-- ---------------------------------------------------------------------------------------------------------------------
-- Callbacks registration
-- ---------------------------------------------------------------------------------------------------------------------

function on_game_start()
    RegisterScriptCallback("ActorMenu_on_item_drag_drop", move_item_drag_drop)
    RegisterScriptCallback("ActorMenu_on_item_before_move", check_move)
    RegisterScriptCallback("ActorMenu_on_item_after_move", update_crate_weight)
    RegisterScriptCallback("save_state", save_state)
    RegisterScriptCallback("load_state", load_state)
end